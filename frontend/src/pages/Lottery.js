import React, { useState, useEffect } from 'react';
import { UsersIcon } from '@heroicons/react/24/outline';
import lotteryService from '../services/lotteryService';
import telegramWebApp from '../services/telegramWebApp';

const Lottery = ({ userId }) => {
  const [lotteries, setLotteries] = useState([]);
  const [participating, setParticipating] = useState({});
  const [showParticipants, setShowParticipants] = useState(false);
  const [selectedLottery, setSelectedLottery] = useState(null);
  const [userBalance, setUserBalance] = useState(0);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Load lotteries and user balance
  useEffect(() => {
    const loadData = async () => {
      try {
        setLoading(true);
        setError(null);

        // Load lotteries
        const lotteriesData = await lotteryService.getLotteries();
        setLotteries(lotteriesData);

        // Load user balance
        if (userId) {
          const balance = await lotteryService.getUserBalance(userId);
          setUserBalance(balance);
        }
      } catch (err) {
        console.error('Error loading lottery data:', err);
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–π');
      } finally {
        setLoading(false);
      }
    };

    loadData();
  }, [userId]);

  const handleParticipate = async (lottery) => {
    if (!userId) {
      telegramWebApp.showAlert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return;
    }

    if (userBalance < lottery.participationCost) {
      telegramWebApp.showAlert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ');
      return;
    }

    setParticipating(prev => ({
      ...prev,
      [lottery.id]: true
    }));

    try {
      await lotteryService.participateInLottery(lottery.id, userId);

      // Update local data
      setLotteries(prev => prev.map(l => {
        if (l.id === lottery.id) {
          return {
            ...l,
            participants: [...l.participants, userId]
          };
        }
        return l;
      }));

      // Update balance
      const newBalance = userBalance - lottery.participationCost;
      setUserBalance(newBalance);

      telegramWebApp.showAlert('–í—ã —É—Å–ø–µ—à–Ω–æ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –ª–æ—Ç–µ—Ä–µ–µ!');
      telegramWebApp.hapticFeedback('success');
    } catch (error) {
      console.error('Participation error:', error);
      telegramWebApp.showAlert(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—á–∞—Å—Ç–∏–∏ –≤ –ª–æ—Ç–µ—Ä–µ–µ');
      telegramWebApp.hapticFeedback('error');
    } finally {
      setParticipating(prev => ({
        ...prev,
        [lottery.id]: false
      }));
    }
  };

  const handleViewParticipants = (lottery) => {
    setSelectedLottery(lottery);
    setShowParticipants(true);
  };

  const formatDate = (dateString) => {
    if (!dateString) return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU');
  };

  const formatPrize = (prizes) => {
    if (!prizes || prizes.length === 0) return '–ü—Ä–∏–∑—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã';

    return prizes.map((prize, index) => {
      if (prize.type === 'fixed') {
        return `${index + 1} –º–µ—Å—Ç–æ: $${prize.amount}`;
      } else if (prize.type === 'percentage') {
        return `${index + 1} –º–µ—Å—Ç–æ: ${prize.percentage}% –æ—Ç –±–∞–Ω–∫–∞`;
      }
      return `${index + 1} –º–µ—Å—Ç–æ: ${prize.description || '–ü—Ä–∏–∑'}`;
    }).join(', ');
  };

  if (loading) {
    return (
      <div className="lotteries-container">
        <div className="loading-spinner"></div>
        <p>Loading lotteries...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="lotteries-container">
        <div className="error-message">
          <h3>–û—à–∏–±–∫–∞</h3>
          <p>{error}</p>
          <button
            className="btn-primary"
            onClick={() => window.location.reload()}
          >
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  if (showParticipants && selectedLottery) {
    return (
      <div className="participants-section">
        <div className="participants-header">
          <h2>–£—á–∞—Å—Ç–Ω–∏–∫–∏: {selectedLottery.title}</h2>
          <button
            className="btn-secondary"
            onClick={() => setShowParticipants(false)}
          >
            –ù–∞–∑–∞–¥ –∫ –ª–æ—Ç–µ—Ä–µ—è–º
          </button>
        </div>

        <div className="participants-list">
          {selectedLottery.participants && selectedLottery.participants.length > 0 ? (
            selectedLottery.participants.map((participantId, index) => (
              <div key={participantId} className="participant-item">
                <div className="participant-avatar">
                  <span>{index + 1}</span>
                </div>
                <span>ID: {participantId}</span>
              </div>
            ))
          ) : (
            <p>–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</p>
          )}
        </div>
      </div>
    );
  }

  return (
    <div className="lotteries-container">
      <h2>Active Lotteries</h2>

      {lotteries.length === 0 ? (
        <div className="no-lotteries">
          <p>–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–π</p>
          <p>–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!</p>
        </div>
      ) : (
        lotteries
          .filter(lottery => lottery.status === 'active')
          .map(lottery => (
            <div key={lottery.id} className="lottery-item">
              <div className="lottery-header">
                <h3 className="lottery-title">{lottery.title}</h3>
                <div className="lottery-price">${lottery.participationCost?.toFixed(2) || '0.00'}</div>
              </div>

              <div className="lottery-info">
                <div className="info-row">
                  <span>üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {lottery.participants?.length || 0} / {lottery.maxParticipants || '‚àû'}</span>
                </div>
                <div className="info-row">
                  <span>üèÜ –ü—Ä–∏–∑—ã: {formatPrize(lottery.prizes)}</span>
                </div>
                {lottery.endDate && (
                  <div className="info-row">
                    <span>üìÖ –î–æ: {formatDate(lottery.endDate)}</span>
                  </div>
                )}
              </div>

              <div className="lottery-actions">
                <button
                  className="btn-participate"
                  onClick={() => handleParticipate(lottery)}
                  disabled={
                    participating[lottery.id] ||
                    lottery.participants?.includes(userId) ||
                    (userBalance < lottery.participationCost) ||
                    lottery.status !== 'active'
                  }
                >
                  {participating[lottery.id] ? '‚è≥ –£—á–∞—Å—Ç–∏–µ...' :
                   lottery.participants?.includes(userId) ? '‚úÖ –£—á–∞—Å—Ç–≤—É–µ—Ç–µ' :
                   userBalance < lottery.participationCost ? 'üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤' :
                   'üé´ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å'}
                </button>
                <button
                  className="btn-secondary"
                  onClick={() => handleViewParticipants(lottery)}
                >
                  <UsersIcon width={16} height={16} />
                  –£—á–∞—Å—Ç–Ω–∏–∫–∏ ({lottery.participants?.length || 0})
                </button>
              </div>
            </div>
          ))
      )}

      {lotteries.filter(l => l.status === 'active').length === 0 && lotteries.length > 0 && (
        <div className="completed-lotteries">
          <h3>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ª–æ—Ç–µ—Ä–µ–∏</h3>
          {lotteries
            .filter(lottery => lottery.status === 'completed')
            .slice(0, 3)
            .map(lottery => (
              <div key={lottery.id} className="lottery-item completed">
                <div className="lottery-header">
                  <h4>{lottery.title}</h4>
                  <span className="winner-badge">
                    üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {lottery.winner || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}
                  </span>
                </div>
              </div>
            ))}
        </div>
      )}
    </div>
  );
};

export default Lottery;