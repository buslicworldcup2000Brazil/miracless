const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient({
  log: ['query', 'info', 'warn', 'error'],
});

async function viewDatabase() {
    try {
        console.log('üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        await prisma.$connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!\n');

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const userCount = await prisma.user.count();
        const lotteryCount = await prisma.lottery.count();
        const transactionCount = await prisma.transaction.count();
        const adminLogCount = await prisma.adminLog.count();

        console.log('üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
        console.log('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', userCount);
        console.log('üé∞ –õ–æ—Ç–µ—Ä–µ–π:', lotteryCount);
        console.log('üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', transactionCount);
        console.log('üìù –õ–æ–≥–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', adminLogCount);
        console.log('');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if (userCount > 0) {
            console.log('üë• –ü–û–°–õ–ï–î–ù–ò–ï 5 –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
            const recentUsers = await prisma.user.findMany({
                take: 5,
                orderBy: { createdAt: 'desc' },
                select: {
                    id: true,
                    telegramId: true,
                    username: true,
                    firstName: true,
                    lastName: true,
                    balance: true,
                    isPremium: true,
                    createdAt: true
                }
            });

            recentUsers.forEach((user, index) => {
                console.log(`${index + 1}. ${user.firstName} ${user.lastName} (@${user.username})`);
                console.log(`   ID: ${user.telegramId}, –ë–∞–ª–∞–Ω—Å: $${user.balance}, Premium: ${user.isPremium ? '‚úÖ' : '‚ùå'}`);
                console.log(`   –°–æ–∑–¥–∞–Ω: ${user.createdAt.toLocaleString('ru-RU')}`);
                console.log('');
            });
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç–µ—Ä–µ–∏
        if (lotteryCount > 0) {
            console.log('üé∞ –ê–ö–¢–ò–í–ù–´–ï –õ–û–¢–ï–†–ï–ò:');
            const activeLotteries = await prisma.lottery.findMany({
                where: { status: 'ACTIVE' },
                include: {
                    prizes: true,
                    _count: { select: { participations: true } }
                },
                orderBy: { createdAt: 'desc' }
            });

            activeLotteries.forEach((lottery, index) => {
                console.log(`${index + 1}. ${lottery.title}`);
                console.log(`   –°—Ç–æ–∏–º–æ—Å—Ç—å: $${lottery.participationCost}`);
                console.log(`   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${lottery._count.participations}/${lottery.maxParticipants}`);
                console.log(`   –ü—Ä–∏–∑—ã: ${lottery.prizes.length} –º–µ—Å—Ç`);
                console.log(`   –ó–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è: ${lottery.endDate.toLocaleString('ru-RU')}`);
                console.log('');
            });
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if (transactionCount > 0) {
            console.log('üí∞ –ü–û–°–õ–ï–î–ù–ò–ï 5 –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
            const recentTransactions = await prisma.transaction.findMany({
                take: 5,
                orderBy: { createdAt: 'desc' },
                include: {
                    user: {
                        select: {
                            username: true,
                            firstName: true,
                            lastName: true
                        }
                    }
                }
            });

            recentTransactions.forEach((tx, index) => {
                const userName = tx.user.username || `${tx.user.firstName} ${tx.user.lastName}`;
                console.log(`${index + 1}. ${userName} - ${tx.type} $${tx.amount}`);
                console.log(`   –°—Ç–∞—Ç—É—Å: ${tx.status}, –î–∞—Ç–∞: ${tx.createdAt.toLocaleString('ru-RU')}`);
                if (tx.description) console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
                console.log('');
            });
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if (adminLogCount > 0) {
            console.log('üìù –ü–û–°–õ–ï–î–ù–ò–ï 5 –î–ï–ô–°–¢–í–ò–ô –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê:');
            const recentLogs = await prisma.adminLog.findMany({
                take: 5,
                orderBy: { timestamp: 'desc' }
            });

            recentLogs.forEach((log, index) => {
                console.log(`${index + 1}. ${log.adminId} - ${log.action}`);
                console.log(`   –í—Ä–µ–º—è: ${log.timestamp.toLocaleString('ru-RU')}`);
                if (log.details) console.log(`   –î–µ—Ç–∞–ª–∏: ${log.details}`);
                console.log('');
            });
        }

        console.log('üéâ –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω!');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);

        if (error.code === 'P1001') {
            console.log('\nüí° –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:');
            console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é DATABASE_URL –≤ .env —Ñ–∞–π–ª–µ');
            console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω–∞');
            console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è');
            console.log('4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à IP —Ä–∞–∑—Ä–µ—à–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö PostgreSQL');
        }
    } finally {
        await prisma.$disconnect();
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
viewDatabase();