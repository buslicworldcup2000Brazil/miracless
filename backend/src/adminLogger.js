const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient({
    log: ['error', 'warn'],
    datasources: {
        db: {
            url: process.env.DATABASE_URL
        }
    }
});

console.log('üìã [ADMIN-LOGGER] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–æ–≤ —Å PostgreSQL');

const logAdminAction = async (adminId, action, details = {}) => {
    console.log('üëë [ADMIN-ACTION] –ù–ê–ß–ê–õ–û –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –î–ï–ô–°–¢–í–ò–Ø –ê–î–ú–ò–ù–ê');
    console.log('üÜî [ADMIN-ACTION] Admin ID:', adminId);
    console.log('üìù [ADMIN-ACTION] Action:', action);
    console.log('üìä [ADMIN-ACTION] Details:', JSON.stringify(details, null, 2));

    try {
        console.log('üíæ [ADMIN-ACTION] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ PostgreSQL...');
        const logEntry = await prisma.adminLog.create({
            data: {
                admin_id: String(adminId),
                action: action,
                details: details,
                timestamp: new Date(),
                ip_address: details.ip || null,
                user_agent: details.userAgent || null
            }
        });

        console.log('‚úÖ [ADMIN-ACTION] –î–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î');
        console.log('üÜî [ADMIN-ACTION] Log ID:', logEntry.id);
        console.log('üìÖ [ADMIN-ACTION] Timestamp:', logEntry.timestamp);

        return logEntry;
    } catch (error) {
        console.error('üí• [ADMIN-ACTION] –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∞:', error);
        console.error('üîç [ADMIN-ACTION] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
            message: error.message,
            code: error.code,
            stack: error.stack
        });

        // Fallback: –ª–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –µ—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        console.log('üìã [ADMIN-ACTION] FALLBACK: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å');
        console.log(`üëë Admin ${adminId} performed action: ${action}`);
        console.log('üìä Details:', details);

        return null;
    } finally {
        // –í—Å–µ–≥–¥–∞ –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –ë–î
        try {
            await prisma.$disconnect();
        } catch (disconnectError) {
            console.warn('‚ö†Ô∏è [ADMIN-ACTION] –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç –ë–î:', disconnectError.message);
        }
    }
};

const getAdminLogs = async (adminId = null, limit = 50) => {
    console.log('üìã [ADMIN-LOGS] –ó–∞–ø—Ä–æ—Å –ª–æ–≥–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–æ–≤');
    console.log('üëë [ADMIN-LOGS] Admin ID filter:', adminId || 'all');
    console.log('üìä [ADMIN-LOGS] Limit:', limit);

    try {
        const where = adminId ? { admin_id: String(adminId) } : {};
        const logs = await prisma.adminLog.findMany({
            where,
            orderBy: { timestamp: 'desc' },
            take: limit
        });

        console.log('‚úÖ [ADMIN-LOGS] –ù–∞–π–¥–µ–Ω–æ –ª–æ–≥–æ–≤:', logs.length);
        return logs;
    } catch (error) {
        console.error('üí• [ADMIN-LOGS] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤:', error);
        return [];
    } finally {
        try {
            await prisma.$disconnect();
        } catch (disconnectError) {
            console.warn('‚ö†Ô∏è [ADMIN-LOGS] –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç –ë–î:', disconnectError.message);
        }
    }
};

const getAdminStats = async () => {
    console.log('üìä [ADMIN-STATS] –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–æ–≤');

    try {
        const stats = await prisma.adminLog.groupBy({
            by: ['admin_id'],
            _count: { id: true },
            orderBy: { _count: { id: 'desc' } }
        });

        console.log('‚úÖ [ADMIN-STATS] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:', stats.length, '–∞–¥–º–∏–Ω–æ–≤');
        return stats;
    } catch (error) {
        console.error('üí• [ADMIN-STATS] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        return [];
    } finally {
        try {
            await prisma.$disconnect();
        } catch (disconnectError) {
            console.warn('‚ö†Ô∏è [ADMIN-STATS] –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç –ë–î:', disconnectError.message);
        }
    }
};

module.exports = { logAdminAction, getAdminLogs, getAdminStats };
