const express = require('express');
const bodyParser = require('body-parser');
const https = require('https');
const { logAdminAction } = require('./adminLogger');
const { authenticateUser, getUserBalance } = require('./auth');
const lotteryScheduler = require('./lotteryScheduler');
const notificationService = require('./notificationService');

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
console.log('üöÄ [SERVER] –ù–ê–ß–ê–õ–û –ó–ê–ü–£–°–ö–ê –°–ï–†–í–ï–†–ê');
console.log('üìä [SERVER] Node.js –≤–µ—Ä—Å–∏—è:', process.version);
console.log('üåç [SERVER] –û–∫—Ä—É–∂–µ–Ω–∏–µ:', process.env.NODE_ENV || 'development');

const app = express();
const port = process.env.PORT || 3000;

console.log('‚öôÔ∏è [SERVER] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Express...');
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

console.log('‚úÖ [SERVER] Express –Ω–∞—Å—Ç—Ä–æ–µ–Ω');

// --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
const ADMIN_IDS = ["5206288199", "1329896342"];
const MAIN_ADMIN = "5206288199"; // –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω —Å –ø–æ–ª–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
const RESTRICTED_ADMIN = "1329896342"; // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –∞–¥–º–∏–Ω
const COINGECKO_API_KEY = "CG-7ZzjP5H5QkdkC78DXGU9mCpY";

// --- Database –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
console.log('üóÑÔ∏è [SERVER] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL —á–µ—Ä–µ–∑ Prisma...');

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Prisma —Å PostgreSQL
try {
    const { PrismaClient } = require('@prisma/client');
    const prisma = new PrismaClient({
        log: ['error', 'warn'],
        datasources: {
            db: {
                url: process.env.DATABASE_URL
            }
        }
    });

    console.log('üîó [SERVER] DATABASE_URL:', process.env.DATABASE_URL ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞' : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    prisma.$connect()
        .then(async () => {
            console.log('‚úÖ [SERVER] PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ Prisma');

            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
            try {
                const userCount = await prisma.user.count();
                console.log(`üìä [SERVER] –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: ${userCount}`);
            } catch (testError) {
                console.warn('‚ö†Ô∏è [SERVER] –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è, –Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', testError.message);
            }
        })
        .catch((error) => {
            console.error('‚ùå [SERVER] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL:', error);
            console.error('üîç [SERVER] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
                message: error.message,
                code: error.code,
                meta: error.meta
            });
            process.exit(1);
        });

    global.prisma = prisma;
} catch (error) {
    console.error('‚ùå [SERVER] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Prisma:', error);
    console.error('üîç [SERVER] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        message: error.message,
        stack: error.stack
    });
    process.exit(1);
}

// --- –ö–ª–∏–µ–Ω—Ç CoinGecko API ---
const getExchangeRate = (currencyIds) => {
    return new Promise((resolve, reject) => {
        const ids = currencyIds.join(',');
        const url = `https://api.coingecko.com/api/v3/simple/price?ids=${ids}&vs_currencies=usd&api_key=${COINGECKO_API_KEY}`;

        https.get(url, (res) => {
            let data = '';
            res.on('data', (chunk) => data += chunk);
            res.on('end', () => {
                try {
                    const rates = JSON.parse(data);
                    resolve(rates);
                } catch (error) {
                    reject(error);
                }
            });
        }).on('error', reject);
    });
};

// --- API Routes ---
console.log('üõ£Ô∏è [SERVER] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –º–∞—Ä—à—Ä—É—Ç–æ–≤...');

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/auth', async (req, res) => {
    console.log('üîê [API] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å POST /api/auth');
    console.log('üì• [API] Headers:', JSON.stringify(req.headers, null, 2));
    console.log('üì¶ [API] Body:', JSON.stringify(req.body, null, 2));

    try {
        const result = await authenticateUser(req, res);
        console.log('‚úÖ [API] –ó–∞–ø—Ä–æ—Å /api/auth –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
        console.error('‚ùå [API] –û—à–∏–±–∫–∞ –≤ /api/auth:', error);
        console.error('üîç [API] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
            message: error.message,
            stack: error.stack,
            status: res.statusCode
        });
        if (!res.headersSent) {
            res.status(500).json({ success: false, message: 'Internal server error' });
        }
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/balance/:userId', async (req, res) => {
    try {
        const result = await getUserBalance(req, res);
    } catch (error) {
        console.error('Balance error:', error);
        res.status(500).json({ success: false, message: 'Internal server error' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
app.get('/api/exchange-rates', async (req, res) => {
    try {
        const rates = await getExchangeRate(['bitcoin', 'ethereum', 'tether']);
        res.json({ success: true, rates });
    } catch (error) {
        console.error('Exchange rates error:', error);
        res.status(500).json({ success: false, message: 'Failed to fetch exchange rates' });
    }
});

// --- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ---
console.log('üöÄ [SERVER] –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...');
console.log('üîå [SERVER] –ü–æ—Ä—Ç:', port);
console.log('üåê [SERVER] –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...');

app.listen(port, () => {
    console.log(`‚úÖ [SERVER] –°–ï–†–í–ï–† –ó–ê–ü–£–©–ï–ù –ù–ê –ü–û–†–¢–£ ${port}`);
    console.log(`üìä [SERVER] Admin IDs: ${ADMIN_IDS.join(', ')}`);
    console.log(`üëë [SERVER] Main Admin: ${MAIN_ADMIN}`);
    console.log(`üîí [SERVER] Restricted Admin: ${RESTRICTED_ADMIN}`);
    console.log(`üîó [SERVER] API endpoints:`);
    console.log(`   POST /api/auth - –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è`);
    console.log(`   GET /api/balance/:userId - –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
    console.log(`   GET /api/exchange-rates - –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç`);
    console.log('üéâ [SERVER] –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï!');
});

// Graceful shutdown
console.log('üõ°Ô∏è [SERVER] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ graceful shutdown...');

process.on('SIGINT', async () => {
    console.log('üõë [SERVER] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT (Ctrl+C)');
    console.log('üîÑ [SERVER] –ù–∞—á–∏–Ω–∞–µ–º graceful shutdown...');
    try {
        if (global.prisma) {
            await global.prisma.$disconnect();
            console.log('‚úÖ [SERVER] PostgreSQL –æ—Ç–∫–ª—é—á–µ–Ω–∞');
        }
        console.log('üëã [SERVER] –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        process.exit(0);
    } catch (error) {
        console.error('‚ùå [SERVER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ë–î:', error);
        process.exit(1);
    }
});

process.on('SIGTERM', async () => {
    console.log('üõë [SERVER] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM');
    console.log('üîÑ [SERVER] –ù–∞—á–∏–Ω–∞–µ–º graceful shutdown...');
    try {
        if (global.prisma) {
            await global.prisma.$disconnect();
            console.log('‚úÖ [SERVER] PostgreSQL –æ—Ç–∫–ª—é—á–µ–Ω–∞');
        }
        console.log('üëã [SERVER] –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        process.exit(0);
    } catch (error) {
        console.error('‚ùå [SERVER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ë–î:', error);
        process.exit(1);
    }
});

console.log('‚úÖ [SERVER] Graceful shutdown –Ω–∞—Å—Ç—Ä–æ–µ–Ω');

module.exports = app;
