// backend/src/auth.js
const { initializeFirebase } = require('./firebase');

let db;
try {
    const { db: firestoreDb } = initializeFirebase();
    db = firestoreDb;
} catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase –≤ auth.js:", error);
    process.exit(1);
}

const authenticateUser = async (req, res) => {
    console.log('üîê [AUTH] –ù–ê–ß–ê–õ–û –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø');
    console.log('üì• [AUTH] –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(req.body, null, 2));

    try {
        const {
            telegram_id,
            username,
            first_name,
            last_name,
            language_code,
            avatar_url,
            is_premium,
            registration_source,
            registration_timestamp,
            unique_id
        } = req.body;

        console.log('üÜî [AUTH] Telegram ID:', telegram_id);

        if (!telegram_id) {
            console.error('‚ùå [AUTH] –û–¢–°–£–¢–°–¢–í–£–ï–¢ TELEGRAM ID');
            return res.status(400).json({ success: false, message: 'Telegram ID is required' });
        }

        console.log('üîç [AUTH] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î...');
        const userRef = db.collection('users').doc(String(telegram_id));
        const doc = await userRef.get();

        let user;
        if (!doc.exists) {
            console.log('üë§ [AUTH] –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ù–ï –ù–ê–ô–î–ï–ù - –°–û–ó–î–ê–ï–ú –ù–û–í–û–ì–û');
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            user = {
                telegram_id: String(telegram_id),
                username: username || '',
                first_name: first_name || '',
                last_name: last_name || '',
                language_code: language_code || 'en',
                avatar_url: avatar_url || null,
                is_premium: is_premium || false,
                registration_source: registration_source || 'unknown',
                registration_timestamp: registration_timestamp ? new Date(registration_timestamp) : new Date(),
                unique_id: unique_id || `MF_${telegram_id}_${Date.now()}`,
                balance: 0,
                created_at: new Date(),
                last_seen: new Date(),
                is_active: true,
                preferences: {
                    notifications: true,
                    language: language_code || 'en',
                    currency: 'USD'
                }
            };
            console.log('üíæ [AUTH] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î...');
            await userRef.set(user);
            console.log(`‚úÖ [AUTH] –ù–û–í–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù: ${telegram_id} (${first_name} ${last_name})`);
        } else {
            console.log('üë§ [AUTH] –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –£–ñ–ï –°–£–©–ï–°–¢–í–£–ï–¢ - –û–ë–ù–û–í–õ–Ø–ï–ú –î–ê–ù–ù–´–ï');
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = doc.data();
            const updateData = {
                last_seen: new Date()
            };

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
            if (username !== undefined && username !== user.username) updateData.username = username;
            if (first_name !== undefined && first_name !== user.first_name) updateData.first_name = first_name;
            if (last_name !== undefined && last_name !== user.last_name) updateData.last_name = last_name;
            if (language_code !== undefined && language_code !== user.language_code) updateData.language_code = language_code;
            if (avatar_url !== undefined && avatar_url !== user.avatar_url) {
                updateData.avatar_url = avatar_url;
                updateData.avatar_updated_at = new Date();
            }
            if (is_premium !== undefined && is_premium !== user.is_premium) updateData.is_premium = is_premium;

            if (Object.keys(updateData).length > 1) { // –±–æ–ª—å—à–µ —á–µ–º —Ç–æ–ª—å–∫–æ last_seen
                console.log('üíæ [AUTH] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
                await userRef.update(updateData);
                user = { ...user, ...updateData };
                console.log('‚úÖ [AUTH] –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
            } else {
                console.log('üìã [AUTH] –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å');
            }
        }

        console.log('üì§ [AUTH] –û—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É...');
        console.log('üë§ [AUTH] –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
            telegram_id: user.telegram_id,
            username: user.username,
            first_name: user.first_name,
            balance: user.balance,
            is_premium: user.is_premium
        });

        res.json({ success: true, user });
        console.log('‚úÖ [AUTH] –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û');
    } catch (error) {
        console.error('üí• [AUTH] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò:', error);
        console.error('üîç [AUTH] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
            message: error.message,
            stack: error.stack,
            code: error.code,
            telegram_id: req.body?.telegram_id
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
        if (error.code === 'PERMISSION_DENIED') {
            console.error('üîê [AUTH] –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Firebase');
        } else if (error.code === 'UNAVAILABLE') {
            console.error('üåê [AUTH] Firebase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        } else if (error.code === 'DEADLINE_EXCEEDED') {
            console.error('‚è∞ [AUTH] –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è Firebase');
        }

        res.status(500).json({ success: false, message: "Internal Server Error" });
        console.log('‚ùå [AUTH] –û–¢–ü–†–ê–í–õ–ï–ù –û–¢–í–ï–¢ –û–ë –û–®–ò–ë–ö–ï –ö–õ–ò–ï–ù–¢–£');
    }
};

const getUserBalance = async (req, res) => {
    try {
        const { userId } = req.params;
        
        if (!userId) {
            return res.status(400).json({ success: false, message: 'User ID is required' });
        }
        
        const userRef = db.collection('users').doc(String(userId));
        const doc = await userRef.get();
        
        if (!doc.exists) {
            return res.status(404).json({ success: false, message: "User not found" });
        }
        
        const user = doc.data();
        res.json({ success: true, balance: user.balance });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", error);
        res.status(500).json({ success: false, message: "Internal Server Error" });
    }
};

module.exports = { authenticateUser, getUserBalance };
