const { PrismaClient } = require('@prisma/client');

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function diagnoseConnection() {
    console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–ê–ó–ï –î–ê–ù–ù–´–•\n');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    console.log('üìã –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø:');
    console.log('DATABASE_URL:', process.env.DATABASE_URL ? '‚úÖ –£–°–¢–ê–ù–û–í–õ–ï–ù–ê' : '‚ùå –ù–ï–¢');
    console.log('NODE_ENV:', process.env.NODE_ENV || 'development');
    console.log('PORT:', process.env.PORT || '3000');
    console.log('');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Prisma
    console.log('üóÑÔ∏è –ü–†–û–í–ï–†–ö–ê PRISMA:');
    try {
        const prisma = new PrismaClient({
            log: ['error', 'warn']
        });

        console.log('‚úÖ Prisma –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        console.log('üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
        await prisma.$connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!');

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ë–î
        const userCount = await prisma.user.count();
        const lotteryCount = await prisma.lottery.count();
        const transactionCount = await prisma.transaction.count();

        console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:');
        console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount}`);
        console.log(`üé∞ –õ–æ—Ç–µ—Ä–µ–π: ${lotteryCount}`);
        console.log(`üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactionCount}`);

        await prisma.$disconnect();
        console.log('‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');

    } catch (error) {
        console.error('‚ùå –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–î:');
        console.error('–¢–∏–ø –æ—à–∏–±–∫–∏:', error.constructor.name);
        console.error('–°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);

        if (error.code) {
            console.error('–ö–æ–¥ –æ—à–∏–±–∫–∏:', error.code);
        }

        // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
        if (error.message.includes('connect ECONNREFUSED')) {
            console.log('\nüí° –†–ï–®–ï–ù–ò–ï:');
            console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ PostgreSQL —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
            console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ DATABASE_URL –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π');
            console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ firewall –∏ —Å–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
        } else if (error.message.includes('authentication failed')) {
            console.log('\nüí° –†–ï–®–ï–ù–ò–ï:');
            console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –≤ DATABASE_URL');
            console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞');
        } else if (error.message.includes('does not exist')) {
            console.log('\nüí° –†–ï–®–ï–ù–ò–ï:');
            console.log('1. –°–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
            console.log('2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏: npx prisma db push');
        }
    }

    console.log('\nüéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
diagnoseConnection().catch(error => {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:', error);
    process.exit(1);
});