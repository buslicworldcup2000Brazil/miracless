const fetch = require('node-fetch');

const API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:3000';

console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API ENDPOINTS');
console.log('üåê –ë–∞–∑–æ–≤—ã–π URL:', API_BASE_URL);
console.log('');

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testUser = {
    telegram_id: '123456789',
    username: 'test_user',
    first_name: 'Test',
    last_name: 'User',
    language_code: 'ru',
    avatar_url: 'https://example.com/avatar.jpg',
    is_premium: false,
    registration_source: 'test',
    registration_timestamp: new Date().toISOString(),
    unique_id: 'TEST_123456789_' + Date.now()
};

async function testEndpoint(method, url, data = null) {
    console.log(`üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${method} ${url}`);

    try {
        const options = {
            method,
            headers: {
                'Content-Type': 'application/json',
            }
        };

        if (data) {
            options.body = JSON.stringify(data);
        }

        const response = await fetch(`${API_BASE_URL}${url}`, options);

        console.log(`üìä –°—Ç–∞—Ç—É—Å: ${response.status}`);
        console.log(`üè∑Ô∏è Content-Type: ${response.headers.get('content-type')}`);
        console.log(`üìè Content-Length: ${response.headers.get('content-length')}`);

        const responseText = await response.text();

        if (responseText) {
            try {
                const jsonData = JSON.parse(responseText);
                console.log('üìÑ JSON –æ—Ç–≤–µ—Ç:', JSON.stringify(jsonData, null, 2));
            } catch (e) {
                console.log('üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç:', responseText);
            }
        } else {
            console.log('‚ùå –ü–£–°–¢–û–ô –û–¢–í–ï–¢!');
        }

        console.log('');
        return { status: response.status, data: responseText };

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
        console.log('');
        return { error: error.message };
    }
}

async function runTests() {
    console.log('üöÄ –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø\n');

    // –¢–µ—Å—Ç 1: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    console.log('='.repeat(50));
    console.log('üîê –¢–ï–°–¢ 1: –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø');
    console.log('='.repeat(50));

    const authResult = await testEndpoint('POST', '/api/auth', testUser);

    if (authResult.error) {
        console.log('‚ùå –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø –ù–ï –†–ê–ë–û–¢–ê–ï–¢!');
        console.log('üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
        console.log('   - –ë—ç–∫–µ–Ω–¥ –Ω–µ –∑–∞–ø—É—â–µ–Ω');
        console.log('   - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
        console.log('   - –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        console.log('   - Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return;
    }

    if (authResult.status === 200) {
        console.log('‚úÖ –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢!');
    } else {
        console.log('‚ö†Ô∏è –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø –í–ï–†–ù–£–õ–ê –û–®–ò–ë–ö–£');
    }

    // –¢–µ—Å—Ç 2: –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('='.repeat(50));
    console.log('üí∞ –¢–ï–°–¢ 2: –ü–û–õ–£–ß–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê');
    console.log('='.repeat(50));

    await testEndpoint('GET', `/api/balance/${testUser.telegram_id}`);

    // –¢–µ—Å—Ç 3: –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç
    console.log('='.repeat(50));
    console.log('üí± –¢–ï–°–¢ 3: –ö–£–†–°–´ –í–ê–õ–Æ–¢');
    console.log('='.repeat(50));

    await testEndpoint('GET', '/api/exchange-rates');

    console.log('üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
    console.log('\nüí° –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤ —Å–º–æ—Ç—Ä–∏—Ç–µ:');
    console.log('   - –ö–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥)');
    console.log('   - –õ–æ–≥–∏ Render (–±—ç–∫–µ–Ω–¥)');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests().catch(error => {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:', error);
});