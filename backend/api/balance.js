// Vercel Serverless Function: /api/balance
const express = require('express');
const serverless = require('serverless-http');
const app = express();
const router = express.Router();
const balanceService = require('../src/balance');
const { getUserBalance } = require('../src/auth');

console.log('üí∞ [API-BALANCE] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –±–∞–ª–∞–Ω—Å–∞ —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è');

app.use(express.json());

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
router.use((req, res, next) => {
    console.log('üí∞ [API-BALANCE] –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:', req.method, req.path);
    console.log('üåê [API-BALANCE] IP:', req.headers['x-forwarded-for'] || req.connection.remoteAddress);
    req.startTime = Date.now();
    next();
});

// –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/:userId', async (req, res) => {
    console.log('üí∞ [GET-BALANCE] –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.params.userId);

    try {
        const balance = await balanceService.getUserBalance(req.params.userId);
        const duration = Date.now() - req.startTime;

        console.log('‚úÖ [GET-BALANCE] –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω:', balance);
        console.log('‚è±Ô∏è [GET-BALANCE] –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', `${duration}ms`);

        res.json({
            success: true,
            balance: balance
        });

    } catch (error) {
        const duration = Date.now() - req.startTime;
        console.error('üí• [GET-BALANCE] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error.message);
        console.error('‚è±Ô∏è [GET-BALANCE] –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏:', `${duration}ms`);

        res.status(500).json({
            success: false,
            message: error.message
        });
    } finally {
        try {
            await prisma.$disconnect();
        } catch (disconnectError) {
            console.warn('‚ö†Ô∏è [GET-BALANCE] –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç –ë–î:', disconnectError.message);
        }
    }
});

// –°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
router.post('/deposit', async (req, res) => {
    console.log('üí∞ [CREATE-DEPOSIT] –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ');

    try {
        const { userId, currency, amount } = req.body;

        console.log('üë§ [CREATE-DEPOSIT] User ID:', userId);
        console.log('üí± [CREATE-DEPOSIT] Currency:', currency);
        console.log('üíµ [CREATE-DEPOSIT] Amount:', amount);

        if (!userId || !currency || !amount) {
            console.error('‚ùå [CREATE-DEPOSIT] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
            return res.status(400).json({
                success: false,
                message: 'Missing required fields: userId, currency, amount'
            });
        }

        const depositRequest = await balanceService.createDepositRequest(userId, currency, parseFloat(amount));
        const duration = Date.now() - req.startTime;

        console.log('‚úÖ [CREATE-DEPOSIT] –ó–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
        console.log('‚è±Ô∏è [CREATE-DEPOSIT] –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', `${duration}ms`);

        res.json({
            success: true,
            data: depositRequest
        });

    } catch (error) {
        const duration = Date.now() - req.startTime;
        console.error('üí• [CREATE-DEPOSIT] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', error.message);
        console.error('‚è±Ô∏è [CREATE-DEPOSIT] –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏:', `${duration}ms`);

        res.status(500).json({
            success: false,
            message: error.message
        });
    }
});

// –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂
router.post('/confirm-payment', async (req, res) => {
    console.log('üí∞ [CONFIRM-PAYMENT] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞');

    try {
        const { userId, currency, txHash } = req.body;

        console.log('üë§ [CONFIRM-PAYMENT] User ID:', userId);
        console.log('üí± [CONFIRM-PAYMENT] Currency:', currency);
        console.log('üîó [CONFIRM-PAYMENT] TX Hash:', txHash);

        if (!userId || !currency || !txHash) {
            console.error('‚ùå [CONFIRM-PAYMENT] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
            return res.status(400).json({
                success: false,
                message: 'Missing required fields: userId, currency, txHash'
            });
        }

        const result = await balanceService.processPaymentConfirmation(userId, currency, txHash);
        const duration = Date.now() - req.startTime;

        if (result.success) {
            console.log('‚úÖ [CONFIRM-PAYMENT] –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            console.log('üíµ [CONFIRM-PAYMENT] –°—É–º–º–∞:', result.usdAmount, 'USD');
            console.log('‚è±Ô∏è [CONFIRM-PAYMENT] –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', `${duration}ms`);

            res.json({
                success: true,
                data: result
            });
        } else {
            console.warn('‚ö†Ô∏è [CONFIRM-PAYMENT] –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω:', result.message);
            console.log('‚è±Ô∏è [CONFIRM-PAYMENT] –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', `${duration}ms`);

            res.json({
                success: false,
                message: result.message,
                data: result
            });
        }

    } catch (error) {
        const duration = Date.now() - req.startTime;
        console.error('üí• [CONFIRM-PAYMENT] –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error.message);
        console.error('‚è±Ô∏è [CONFIRM-PAYMENT] –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏:', `${duration}ms`);

        res.status(500).json({
            success: false,
            message: error.message
        });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π
router.get('/deposit-history/:userId', async (req, res) => {
    console.log('üí∞ [DEPOSIT-HISTORY] –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π');

    try {
        const { userId } = req.params;
        const { limit = 20 } = req.query;

        console.log('üë§ [DEPOSIT-HISTORY] User ID:', userId);
        console.log('üìä [DEPOSIT-HISTORY] Limit:', limit);

        const history = await balanceService.getDepositHistory(userId, parseInt(limit));
        const duration = Date.now() - req.startTime;

        console.log('‚úÖ [DEPOSIT-HISTORY] –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—É—á–µ–Ω–∞:', history.length, '–∑–∞–ø–∏—Å–µ–π');
        console.log('‚è±Ô∏è [DEPOSIT-HISTORY] –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', `${duration}ms`);

        res.json({
            success: true,
            data: history
        });

    } catch (error) {
        const duration = Date.now() - req.startTime;
        console.error('üí• [DEPOSIT-HISTORY] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', error.message);
        console.error('‚è±Ô∏è [DEPOSIT-HISTORY] –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏:', `${duration}ms`);

        res.status(500).json({
            success: false,
            message: error.message
        });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
router.get('/addresses/:userId', async (req, res) => {
    console.log('üí∞ [PAYMENT-ADDRESSES] –ó–∞–ø—Ä–æ—Å –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è');

    try {
        const { userId } = req.params;

        console.log('üë§ [PAYMENT-ADDRESSES] User ID:', userId);

        const addresses = balanceService.getAllPaymentAddresses();
        const duration = Date.now() - req.startTime;

        console.log('‚úÖ [PAYMENT-ADDRESSES] –ê–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–µ–Ω—ã');
        console.log('‚è±Ô∏è [PAYMENT-ADDRESSES] –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', `${duration}ms`);

        res.json({
            success: true,
            addresses: addresses
        });

    } catch (error) {
        const duration = Date.now() - req.startTime;
        console.error('üí• [PAYMENT-ADDRESSES] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤:', error.message);
        console.error('‚è±Ô∏è [PAYMENT-ADDRESSES] –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏:', `${duration}ms`);

        res.status(500).json({
            success: false,
            message: error.message
        });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–ª—é—Ç–µ
router.get('/currency/:currency', async (req, res) => {
    console.log('üí∞ [CURRENCY-INFO] –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–ª—é—Ç–µ');

    try {
        const { currency } = req.params;

        console.log('üí± [CURRENCY-INFO] Currency:', currency);

        const currencyInfo = balanceService.getCurrencyInfo(currency);
        const duration = Date.now() - req.startTime;

        console.log('‚úÖ [CURRENCY-INFO] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞');
        console.log('‚è±Ô∏è [CURRENCY-INFO] –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', `${duration}ms`);

        res.json({
            success: true,
            data: currencyInfo
        });

    } catch (error) {
        const duration = Date.now() - req.startTime;
        console.error('üí• [CURRENCY-INFO] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error.message);
        console.error('‚è±Ô∏è [CURRENCY-INFO] –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏:', `${duration}ms`);

        res.status(500).json({
            success: false,
            message: error.message
        });
    }
});

app.use('/api/balance', router);
module.exports = app;
module.exports.handler = serverless(app);
