const { PrismaClient } = require('@prisma/client');

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è PostgreSQL
const prisma = new PrismaClient({
  log: ['query', 'info', 'warn', 'error'],
});

async function testPostgreSQL() {
    try {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PostgreSQL...\n');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await prisma.$connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ!');

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ö–µ–º–µ
        const result = await prisma.$queryRaw`SELECT version()`;
        console.log('üìä –í–µ—Ä—Å–∏—è PostgreSQL:', result[0].version);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        const tables = await prisma.$queryRaw`
            SELECT table_name
            FROM information_schema.tables
            WHERE table_schema = 'public'
            ORDER BY table_name;
        `;

        console.log('üìã –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
        tables.forEach(table => {
            console.log(`  - ${table.table_name}`);
        });

        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const testUser = await prisma.user.create({
            data: {
                telegramId: `test_postgres_${Date.now()}`,
                username: `postgres_test_${Date.now()}`,
                firstName: 'PostgreSQL',
                lastName: 'Test',
                languageCode: 'ru',
                balance: 500.00,
                isPremium: true,
                uniqueId: `PG_TEST_${Date.now()}_${Math.random().toString(36).substring(2, 8)}`
            }
        });

        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ PostgreSQL:', testUser);

        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ª–æ—Ç–µ—Ä–µ—é
        const testLottery = await prisma.lottery.create({
            data: {
                title: 'PostgreSQL –¢–µ—Å—Ç–æ–≤–∞—è –ª–æ—Ç–µ—Ä–µ—è',
                description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã PostgreSQL',
                participationCost: 25.00,
                maxParticipants: 200,
                endDate: new Date(Date.now() + 72 * 60 * 60 * 1000), // –ß–µ—Ä–µ–∑ 72 —á–∞—Å–∞
                prizes: {
                    create: [
                        { place: 1, amount: 1000.00, type: 'FIXED' },
                        { place: 2, amount: 500.00, type: 'FIXED' },
                        { place: 3, amount: 250.00, type: 'FIXED' }
                    ]
                }
            },
            include: {
                prizes: true
            }
        });

        console.log('‚úÖ –õ–æ—Ç–µ—Ä–µ—è —Å–æ–∑–¥–∞–Ω–∞ –≤ PostgreSQL:', testLottery);

        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        const transaction = await prisma.transaction.create({
            data: {
                userId: testUser.id,
                type: 'DEPOSIT',
                amount: 100.00,
                usdAmount: 100.00,
                description: '–¢–µ—Å—Ç–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç –≤ PostgreSQL',
                status: 'COMPLETED'
            }
        });

        console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ PostgreSQL:', transaction);

        // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        const finalUsers = await prisma.user.findMany();
        const finalLotteries = await prisma.lottery.findMany({
            include: { prizes: true }
        });
        const finalTransactions = await prisma.transaction.findMany();

        console.log('\nüìä –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ PostgreSQL:');
        console.log('üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', finalUsers.length);
        console.log('üé∞ –í—Å–µ–≥–æ –ª–æ—Ç–µ—Ä–µ–π:', finalLotteries.length);
        console.log('üí∞ –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', finalTransactions.length);

        console.log('\nüéâ PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ!');
        console.log('üíæ –î–∞–Ω–Ω—ã–µ –Ω–∞–¥–µ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
        console.log('üîÑ –ì–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É');
        console.log('üöÄ –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –¥–æ –º–∏–ª–ª–∏–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è PostgreSQL:', error);

        if (error.code === 'P1001') {
            console.log('\nüí° –†–µ—à–µ–Ω–∏–µ:');
            console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ DATABASE_URL –≤ .env —Ñ–∞–π–ª–µ');
            console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
            console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
        }
    } finally {
        await prisma.$disconnect();
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testPostgreSQL();