const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testDatabase() {
    try {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');

        // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        const existingUsers = await prisma.user.findMany();
        const existingLotteries = await prisma.lottery.findMany({
            include: { prizes: true }
        });

        console.log('üìä –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î:');
        console.log('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', existingUsers.length);
        console.log('üé∞ –õ–æ—Ç–µ—Ä–µ–∏:', existingLotteries.length);

        if (existingUsers.length > 0) {
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞!');
            console.log('üìã –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', existingUsers[0]);
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID
        const timestamp = Date.now();
        const newUser = await prisma.user.create({
            data: {
                telegramId: `test_${timestamp}`,
                username: `test_user_${timestamp}`,
                firstName: 'Test',
                lastName: 'User',
                languageCode: 'ru',
                balance: 150.75,
                isPremium: false,
                uniqueId: `MF_test_${timestamp}_${timestamp}`
            }
        });

        console.log('‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', newUser);

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ª–æ—Ç–µ—Ä–µ—é
        const newLottery = await prisma.lottery.create({
            data: {
                title: `–¢–µ—Å—Ç–æ–≤–∞—è –ª–æ—Ç–µ—Ä–µ—è ${timestamp}`,
                description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –ë–î',
                participationCost: 15.00,
                maxParticipants: 50,
                endDate: new Date(Date.now() + 48 * 60 * 60 * 1000), // –ß–µ—Ä–µ–∑ 48 —á–∞—Å–æ–≤
                prizes: {
                    create: [
                        { place: 1, amount: 750.00, type: 'FIXED' },
                        { place: 2, amount: 300.00, type: 'FIXED' }
                    ]
                }
            },
            include: {
                prizes: true
            }
        });

        console.log('‚úÖ –ù–æ–≤–∞—è –ª–æ—Ç–µ—Ä–µ—è —Å–æ–∑–¥–∞–Ω–∞:', newLottery);

        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const transaction = await prisma.transaction.create({
            data: {
                userId: newUser.id,
                type: 'DEPOSIT',
                amount: 75.00,
                usdAmount: 75.00,
                description: '–¢–µ—Å—Ç–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                status: 'COMPLETED'
            }
        });

        console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:', transaction);

        // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        const finalUsers = await prisma.user.findMany();
        const finalLotteries = await prisma.lottery.findMany({
            include: { prizes: true }
        });
        const finalTransactions = await prisma.transaction.findMany();

        console.log('\nüìä –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î:');
        console.log('üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', finalUsers.length);
        console.log('üé∞ –í—Å–µ–≥–æ –ª–æ—Ç–µ—Ä–µ–π:', finalLotteries.length);
        console.log('üí∞ –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', finalTransactions.length);

        console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!');
        console.log('üíæ SQLite –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ!');
        console.log('üîÑ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏');
        console.log('üìÅ –§–∞–π–ª –ë–î: backend/prisma/dev.db');
        console.log('üöÄ –ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ!');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    } finally {
        await prisma.$disconnect();
    }
}

testDatabase();